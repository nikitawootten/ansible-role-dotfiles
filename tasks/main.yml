---
- name: Find dotfiles
  ansible.builtin.find:
    paths:
      # find dotfiles in folder called by parent role
      - "{{ ansible_parent_role_paths[0] }}/{{ dotfiles_src }}"
    recurse: true
    hidden: true
  register: find
- name: Create dotfiles directories
  ansible.builtin.file:
    path: "{{ dotfiles_dest }}/{{ item | regex_replace('(^' + ansible_parent_role_paths[0] + '/' + dotfiles_src + '/)(?P<dir>.*/)(.*$)', '\\g<dir>') }}"
    state: directory
    # Permission related settings
    mode: "{{ dofiles_mode | default(omit) }}"
    owner: "{{ dotfiles_owner | default(omit) }}"
    group: "{{ dotfiles_group | default(omit) }}"
  # Extract all directories that must be created
  # This is a multistep filter:
  # 1. Extract the path from the found files
  # 2. Search for files that have a subdirectory
  # 3. Select only matches that return a string (non-matches return a None)
  # 4. Select only unique matches (not to create the same directory multiple times)
  with_items: >-
    {{
      find.files
        | map(attribute='path')
        | map('regex_search', '^' + ansible_parent_role_paths[0] + '/' + dotfiles_src + '/.*/')
        | select('string')
        | list | unique
    }}
  become: "{{ dotfiles_become | default(omit) }}"
- name: Symlink dotfiles
  ansible.builtin.file:
    src: "{{ item.path }}"
    # Remove path before {{ ansible_parent_role_paths[0] }}/{{ dotfiles_src }}
    path: "{{ dotfiles_dest }}/{{ item.path | regex_replace('(^' + ansible_parent_role_paths[0] + '/' + dotfiles_src + '/)(.*)', '\\g<2>') }}"
    state: link
    # Permission related settings
    mode: "{{ dotfiles_mode | default(omit) }}"
    owner: "{{ dotfiles_owner | default(omit) }}"
    group: "{{ dotfiles_group | default(omit) }}"
  with_items: "{{ find.files }}"
  become: "{{ dotfiles_become | default(omit) }}"
